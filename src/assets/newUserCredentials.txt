/** @format */

import BlockCheckInput from '../slytlesBlocks/blockCheckInput';
import BlockFormControl from '../slytlesBlocks/blockFormControl';
import Input from '../inputs/input';
import { ChangeEventHandler, useState } from 'react';
// import BlockBtn from '../btn/blockBtn';
// import Btn from '../btn/btn';
import { NewUser } from '../../interfaces/interfaces';

export interface NewUserCredentialsProps {
	// onChange e callback para retornar o estado interno para o componente pai
	//
	onChange?: (value: NewUser) => void;
}

const NewUserCredentials = ({ onChange }: NewUserCredentialsProps) => {
	// use state 'e uma funcao generica. ele 'e generica ao tipo do estado que ela armazena
	// useState<NewUser> especifica que o dado armazenado pelo use state tem que ser do tipo NewUser
	// quando useState nao especifica o tipo generico, useState usa inferencia, ou seja, o tipo generico 'e igual ao tipo do valor inicial
	//Patriota[<(order e progresso)>]
	const [data, setData] = useState<NewUser>({
		name: '',
		password: '',
		email: '',
	});
	// usando type casting ""as""
	//	const [data, setData] = useState({} as NewUser);

	const handleChange: ChangeEventHandler<HTMLInputElement> = (e) => {
		const name = e.target.name;
		const value = e.target.value;

		const newData = {
			...data,
			[name]: value,
		};
		// newData[ name ] = value;

		// Cria um object, com uma propriedade chamada "name" literalmente
		// com o valor "indiamairs"
		// const foo = {
		// 	name: "indiamaris"
		// }

		// Cria um object, com uma propriedade chamada "name" literalmente
		// com o valor "indiamairs"
		// let name: 'indiamaris';
		// const bar = {
		// 	name,
		// };

		// Criar um object com uma propriedade chamada "banana" com o valor 12
		// let name: "banana";
		// let value: 12
		// let obj = {
		// 	[name]: value
		// }

		setData(newData);

		// se onchange existir, execute com o novo estado
		onChange?.(newData);
	};

	return (
		<>
			<BlockFormControl>
				<Input
					type='text'
					className='form-control'
					id='floatingInputName'
					name='name'
					placeholder='name'
					label='	Name'
					value={data.name}
					onChange={handleChange}
				/>
			</BlockFormControl>
			<BlockFormControl>
				<Input
					type='email'
					className='form-control'
					id='floatingInputEmail'
					name='email'
					placeholder='name@example.com'
					label='	Email address'
					value={data.email}
					onChange={handleChange}
				/>
			</BlockFormControl>

			<BlockFormControl>
				<Input
					type='password'
					className='form-control'
					id='floatingInputPassword'
					name='password'
					placeholder='Password'
					label='Password'
					value={data.password}
					onChange={handleChange}
				/>
			</BlockFormControl>

			<BlockCheckInput>
				<Input
					type='checkbox'
					className='naosei'
					id='flexCheckDefault'
					placeholder='rememberme'
					label='	Remember me'
				/>
			</BlockCheckInput>
		</>
	);
};

export default NewUserCredentials;



